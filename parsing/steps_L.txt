parsing steps cuz im lost:
##########################

initialize✅

get the environment set up ✅
	- increase SHLVL❌

signals✅

readline for input✅

history✅

check open quotes✅

check if pipes are valid✅
	- Leading pipe: | ls✅
	- Trailing pipe: ls |✅
	- Consecutive pipes: ls ||| grep✅
	- Empty command after pipe: | ✅
	- Empty command between pipes: ls || grep ✅

split by pipes and remove white spaces before and after✅

u can probably expand variables while tokenizing so u dont malloc too much NAHHH


tokenize (split into 'words')
    - preserve quotes???
    - expand variables while tokenizing and use substr to remove each part I think
    - 

EXPAND THE VARIABLES FIRST!!!!!! ( "export B=ls"    \n     "$B -la") !!!!!!!!!!!!!!!!!!!
expand env variables (eg; $USER) if double quotes❌
	- $?x (invalid variable)❌
	- $123 (numbers aren't valid variable names)❌

check if theres any syntax errors in the beginning or end❌
	- ls &&| grep❌
	- Mixed: ls && | grep❌

	- Missing filename: ls >❌
	- Double <: cat << < file❌
	- Mixed without commands: < > file❌
	- cat <<❌
	- Leading &&: && ls❌


put everything into the structs ❌
	- redirects into recirects
	- command into cmd 
	- command agruments into cmg_args
	.......


replace \ characters (eg; \n , \t , ...)❌

handle $?❌

preserve quotes❌




= things that should fail
	- echo m'y frie"nd
	- echo hello > > file 
	- '|'   ,   ">"    and those stuff (actually just operators alone)
	- 
= this should pass for parsing (not neccessarily execution)
	- echo hello | meow world
	- echo hello world | > meow.txt
	- echo hello | $USER
	- ls | -
	- ls %&$
	- cat << EOF grep
	- cat file@
	- exit 9 2
	- < meow
	- > meow
exit with codes, look up what they should be


Commands That Should Pass Parsing
	echo hello | grep h | wc -l
	ls -la > output.txt
	cat < file.txt | grep "pattern" >> result.txt
	echo "foo bar" | cat -e
	grep "test" file1 file2
	ls | sort | uniq
	cat << EOF | grep hello
	hello
	EOF
	export VAR=value && echo $VAR
	cd .. || echo "Failed"
	pwd; ls; echo "done"
	echo $lolwrongvar hello
Commands That Should Fail Parsing
	| echo hello
	echo hello ||
	ls > | wc
	cat <<
	grep || sort
	ls > output.txt <
	cat << EOF | | grep hello
	echo "unclosed quote
	ls ;; pwd
	echo hello | > file.txt
	$USERecho hello




notes
bash ececutes from the end to the start (world hello)
pipe changes fd from output to input
check error codes
- 


✅❌